package pl.sstenzel.ug.hsqldb.flowers.service;

import pl.sstenzel.ug.hsqldb.flowers.domain.Flower;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class FlowerServiceJDBC implements FlowerService{

    private Connection connection;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableFlower = "CREATE TABLE Flower(id bigint GENERATED BY DEFAULT AS IDENTITY, name VARCHAR(20), pickDate DATE, dogToxic BOOLEAN, petalAmount integer)";

    private String addFlowerStmt = "INSERT INTO Flower (name, pickDate, dogToxic, petalAmount) VALUES (?, ?, ?, ?)";
    private String deleteFlowerStmt = "";
    private String getFlowerStmt = "";
    private String addFlowersStmt = "";
    private String getAllFlowersStmt = "SELECT id, name, pickDate, dogToxic, petalAmount FROM Flower";
    private String deleteAllFlowersStmt = "DELETE FROM Flower";

    private PreparedStatement addFlowerPStmt;
    private PreparedStatement deleteFlowerPStmt;
    private PreparedStatement getFlowerPStmt;
    private PreparedStatement addFlowersPStmt;
    private PreparedStatement getAllFlowersPStmt;
    private PreparedStatement deleteAllFlowersPStmt;

    private Statement statement;

    public FlowerServiceJDBC() throws SQLException {
        connection = DriverManager.getConnection(url);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("Flowers".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }
        if (!tableExists)
            statement.executeUpdate(createTableFlower);

        addFlowerPStmt = connection.prepareStatement(addFlowerStmt);

        getAllFlowersPStmt = connection.prepareStatement(getAllFlowersStmt);
        deleteAllFlowersPStmt = connection.prepareStatement(deleteAllFlowersStmt);



        // TODO reszta statementow



    }

    Connection getConnection() {
        return connection;
    }

    @Override
    public boolean addFlower(Flower flower){
        boolean result = false;
        try {
            addFlowerPStmt.setString(1, flower.getName());
            addFlowerPStmt.setDate(2, (Date) flower.getPickDate());
            addFlowerPStmt.setBoolean(3, flower.getDogToxic());
            addFlowerPStmt.setInt(4, flower.getPetalAmount());

            int noOfRecords = addFlowerPStmt.executeUpdate();

            if (noOfRecords == 1){
                result = true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    };


//    public Flower getFlower(long id){ };
//    public Boolean deleteFlower(long id){};
//    public void addFlowers(List<Flower> flowers){};



    public List<Flower> getAllFlowers(){
        List<Flower> flowers = new ArrayList<Flower>();

        try {
            ResultSet rs = getAllFlowersPStmt.executeQuery();

            while (rs.next()) {
                Flower p = new Flower();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setPickDate(rs.getDate("pickDate"));
                p.setDogToxic(rs.getBoolean("dogToxic"));
                p.setPetalAmount(rs.getInt("petalAmount"));
                flowers.add(p);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return flowers;
    };


    public void deleteAllFlowers() throws SQLException{
        deleteAllFlowersPStmt.executeUpdate();
    };



}
